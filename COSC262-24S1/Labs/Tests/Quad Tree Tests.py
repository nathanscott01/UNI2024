import unittest
from quadtree import *

expected_output1 = """\
Node((50, 50), 100, [
  Leaf((25.0, 25.0), 50.0, []),
  Node((25.0, 75.0), 50.0, [
    Leaf((12.5, 62.5), 25.0, [(15, 60)]),
    Leaf((12.5, 87.5), 25.0, []),
    Node((37.5, 62.5), 25.0, [
      Leaf((31.25, 56.25), 12.5, [(30, 58)]),
      Leaf((31.25, 68.75), 12.5, []),
      Leaf((43.75, 56.25), 12.5, []),
      Leaf((43.75, 68.75), 12.5, [(42, 66), (40, 70)]),
    ]),
    Leaf((37.5, 87.5), 25.0, []),
  ]),
  Leaf((75.0, 25.0), 50.0, [(60, 15)]),
  Leaf((75.0, 75.0), 50.0, []),
])"""

expected_output2 = """\
Node((50, 50), 100, [
  Leaf((25.0, 25.0), 50.0, [(1, 1)]),
  Leaf((25.0, 75.0), 50.0, [(1, 99)]),
  Leaf((75.0, 25.0), 50.0, [(99, 1)]),
  Leaf((75.0, 75.0), 50.0, [(99, 99)]),
])"""

expected_output3 = """\
Node((50, 50), 100, [
  Node((25.0, 25.0), 50.0, [
    Leaf((12.5, 12.5), 25.0, [(1, 1)]),
    Leaf((12.5, 37.5), 25.0, []),
    Leaf((37.5, 12.5), 25.0, []),
    Leaf((37.5, 37.5), 25.0, [(49, 49)]),
  ]),
  Node((25.0, 75.0), 50.0, [
    Leaf((12.5, 62.5), 25.0, []),
    Leaf((12.5, 87.5), 25.0, [(1, 99)]),
    Leaf((37.5, 62.5), 25.0, [(49, 51)]),
    Leaf((37.5, 87.5), 25.0, []),
  ]),
  Node((75.0, 25.0), 50.0, [
    Leaf((62.5, 12.5), 25.0, []),
    Leaf((62.5, 37.5), 25.0, [(51, 49)]),
    Leaf((87.5, 12.5), 25.0, [(99, 1)]),
    Leaf((87.5, 37.5), 25.0, []),
  ]),
  Node((75.0, 75.0), 50.0, [
    Leaf((62.5, 62.5), 25.0, [(51, 51)]),
    Leaf((62.5, 87.5), 25.0, []),
    Leaf((87.5, 62.5), 25.0, []),
    Leaf((87.5, 87.5), 25.0, [(99, 99)]),
  ]),
])"""

expected_output4 = """\
Node((50, 50), 100, [
  Node((25.0, 25.0), 50.0, [
    Leaf((12.5, 12.5), 25.0, [(1, 1)]),
    Leaf((12.5, 37.5), 25.0, []),
    Leaf((37.5, 12.5), 25.0, []),
    Leaf((37.5, 37.5), 25.0, [(49, 49)]),
  ]),
  Node((25.0, 75.0), 50.0, [
    Leaf((12.5, 62.5), 25.0, []),
    Leaf((12.5, 87.5), 25.0, [(1, 99)]),
    Leaf((37.5, 62.5), 25.0, [(49, 51)]),
    Leaf((37.5, 87.5), 25.0, []),
  ]),
  Node((75.0, 25.0), 50.0, [
    Leaf((62.5, 12.5), 25.0, []),
    Leaf((62.5, 37.5), 25.0, [(51, 49)]),
    Leaf((87.5, 12.5), 25.0, [(99, 1)]),
    Leaf((87.5, 37.5), 25.0, []),
  ]),
  Node((75.0, 75.0), 50.0, [
    Node((62.5, 62.5), 25.0, [
      Node((56.25, 56.25), 12.5, [
        Leaf((53.125, 53.125), 6.25, [(51, 51)]),
        Leaf((53.125, 59.375), 6.25, []),
        Leaf((59.375, 53.125), 6.25, []),
        Leaf((59.375, 59.375), 6.25, [(60, 60)]),
      ]),
      Leaf((56.25, 68.75), 12.5, []),
      Leaf((68.75, 56.25), 12.5, []),
      Leaf((68.75, 68.75), 12.5, [(70, 70)]),
    ]),
    Leaf((62.5, 87.5), 25.0, []),
    Leaf((87.5, 62.5), 25.0, []),
    Node((87.5, 87.5), 25.0, [
      Leaf((81.25, 81.25), 12.5, [(80, 80)]),
      Leaf((81.25, 93.75), 12.5, []),
      Leaf((93.75, 81.25), 12.5, []),
      Node((93.75, 93.75), 12.5, [
        Leaf((90.625, 90.625), 6.25, [(90, 90)]),
        Leaf((90.625, 96.875), 6.25, []),
        Leaf((96.875, 90.625), 6.25, []),
        Leaf((96.875, 96.875), 6.25, [(99, 99)]),
      ]),
    ]),
  ]),
])"""


class MyTestCase(unittest.TestCase):
    def test_quadtree1(self):
        points = [(60, 15), (15, 60), (30, 58), (42, 66), (40, 70)]
        centre = Vec(50, 50)
        size = 100
        result = build_quad(points, centre, size, False, False)
        self.assertEqual(expected_output1, str(result))  # add assertion here

    def test_quadtree2(self):
        points = [(1, 1), (99, 1), (1, 99), (99, 99)]
        centre = Vec(50, 50)
        size = 100
        result = build_quad(points, centre, size, False, False)
        self.assertEqual(expected_output2, str(result))

    def test_quadtree3(self):
        points = [(1, 1), (99, 1), (1, 99), (99, 99), (49, 49), (51, 49), (49, 51), (51, 51)]
        centre = Vec(50, 50)
        size = 100
        result = build_quad(points, centre, size, True, False, 1)
        self.assertEqual(expected_output3, str(result))

    def test_quadtree4(self):
        points = [(1, 1), (99, 1), (1, 99), (99, 99),
                  (49, 49), (51, 49), (49, 51), (51, 51),
                  (60, 60), (70, 70), (80, 80), (90, 90)]
        centre = Vec(50, 50)
        size = 100
        result = build_quad(points, centre, size, True, False, 1)
        self.assertEqual(expected_output4, str(result))


if __name__ == '__main__':
    unittest.main()
